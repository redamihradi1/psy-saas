# Generated by Django 5.2.7 on 2025-10-18 10:33

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0005_license_max_tests_d2r_license_max_tests_pep3_and_more'),
        ('cabinet', '0001_initial'),
        ('tests_psy', '0002_alter_symbolereference_unique_together_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom du domaine')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('ordre', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Domaine',
                'verbose_name_plural': 'Domaines',
                'ordering': ['ordre', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NiveauAdaptatif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('niveau', models.CharField(choices=[('faible', 'Faible'), ('assez_faible', 'Assez faible'), ('adapte', 'Adapté'), ('assez_eleve', 'Assez élevé'), ('eleve', 'Élevé')], max_length=20, verbose_name='Niveau adaptatif')),
                ('echelle_v_min', models.IntegerField(verbose_name='Échelle-v minimum')),
                ('echelle_v_max', models.IntegerField(verbose_name='Échelle-v maximum')),
                ('note_standard_min', models.IntegerField(verbose_name='Note standard minimum')),
                ('note_standard_max', models.IntegerField(verbose_name='Note standard maximum')),
            ],
            options={
                'verbose_name': 'Niveau adaptatif',
                'verbose_name_plural': 'Niveaux adaptatifs',
                'ordering': ['echelle_v_min'],
            },
        ),
        migrations.CreateModel(
            name='NoteDomaineVMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tranche_age', models.CharField(choices=[('1-2', '1 à 2 ans'), ('3-6', '3 à 6 ans'), ('7-18', '7 à 18 ans'), ('19-49', '19 à 49 ans'), ('50-90', '50 à 90 ans')], max_length=10, verbose_name="Tranche d'âge")),
                ('communication_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Communication minimum')),
                ('communication_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Communication maximum')),
                ('vie_quotidienne_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Vie quotidienne minimum')),
                ('vie_quotidienne_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Vie quotidienne maximum')),
                ('socialisation_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Socialisation minimum')),
                ('socialisation_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Socialisation maximum')),
                ('motricite_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Motricité minimum')),
                ('motricite_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(72)], verbose_name='Note Motricité maximum')),
                ('note_standard', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(160)], verbose_name='Note standard')),
                ('note_composite_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Note composite minimum')),
                ('note_composite_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Note composite maximum')),
                ('rang_percentile', models.CharField(max_length=10, verbose_name='Rang percentile')),
            ],
            options={
                'verbose_name': 'Correspondance Note Domaine',
                'verbose_name_plural': 'Correspondances Notes Domaines',
                'ordering': ['tranche_age', '-note_standard'],
                'unique_together': {('tranche_age', 'note_standard')},
            },
        ),
        migrations.CreateModel(
            name='SousDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du sous-domaine')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('ordre', models.PositiveIntegerField(default=0, verbose_name="Ordre d'affichage")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sous_domaines', to='tests_psy.domain', verbose_name='Domaine parent')),
            ],
            options={
                'verbose_name': 'Sous-domaine',
                'verbose_name_plural': 'Sous-domaines',
                'ordering': ['domain', 'ordre', 'name'],
                'unique_together': {('domain', 'name')},
            },
        ),
        migrations.CreateModel(
            name='QuestionVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texte', models.TextField(verbose_name='Question')),
                ('numero_item', models.PositiveIntegerField(help_text="Numéro de l'item dans le sous-domaine", verbose_name="Numéro de l'item")),
                ('note', models.TextField(blank=True, help_text='Pour plusieurs lignes, utilisez | comme séparateur', null=True, verbose_name='Note/Indication')),
                ('permet_na', models.BooleanField(default=False, verbose_name='Permet la réponse N/A')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sous_domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions_vineland', to='tests_psy.sousdomain')),
            ],
            options={
                'verbose_name': 'Question Vineland',
                'verbose_name_plural': 'Questions Vineland',
                'ordering': ['sous_domaine', 'numero_item'],
                'unique_together': {('sous_domaine', 'numero_item')},
            },
        ),
        migrations.CreateModel(
            name='PlageItemVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_debut', models.PositiveIntegerField(verbose_name='Premier item de la plage')),
                ('item_fin', models.PositiveIntegerField(verbose_name='Dernier item de la plage')),
                ('age_debut', models.PositiveIntegerField(verbose_name='Âge minimum (en années)')),
                ('age_fin', models.PositiveIntegerField(blank=True, help_text='Laisser vide si pas de maximum (7+ par exemple)', null=True, verbose_name='Âge maximum (en années)')),
                ('sous_domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plages_items_vineland', to='tests_psy.sousdomain')),
            ],
            options={
                'verbose_name': "Plage d'items Vineland",
                'verbose_name_plural': "Plages d'items Vineland",
                'ordering': ['sous_domaine', 'item_debut'],
            },
        ),
        migrations.CreateModel(
            name='EchelleVMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_debut_annee', models.PositiveIntegerField(verbose_name='Âge début - Années')),
                ('age_debut_mois', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(11)], verbose_name='Âge début - Mois')),
                ('age_debut_jour', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(30)], verbose_name='Âge début - Jours')),
                ('age_fin_annee', models.PositiveIntegerField(verbose_name='Âge fin - Années')),
                ('age_fin_mois', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(11)], verbose_name='Âge fin - Mois')),
                ('age_fin_jour', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(30)], verbose_name='Âge fin - Jours')),
                ('note_brute_min', models.PositiveIntegerField(verbose_name='Note brute minimum')),
                ('note_brute_max', models.PositiveIntegerField(verbose_name='Note brute maximum')),
                ('note_echelle_v', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)], verbose_name='Note échelle-V')),
                ('sous_domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='echelle_v_mappings', to='tests_psy.sousdomain', verbose_name='Sous-domaine')),
            ],
            options={
                'verbose_name': 'Correspondance Échelle-V',
                'verbose_name_plural': 'Correspondances Échelle-V',
                'ordering': ['sous_domaine', 'age_debut_annee', 'age_debut_mois', 'note_brute_min'],
            },
        ),
        migrations.CreateModel(
            name='TestVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_passation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de passation')),
                ('notes', models.TextField(blank=True, verbose_name='Notes du psychologue')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.organization', verbose_name='Organisation')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests_vineland', to='cabinet.patient', verbose_name='Patient')),
                ('psychologue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tests_vineland_administres', to=settings.AUTH_USER_MODEL, verbose_name='Psychologue')),
            ],
            options={
                'verbose_name': 'Test Vineland',
                'verbose_name_plural': 'Tests Vineland',
                'ordering': ['-date_passation'],
            },
        ),
        migrations.CreateModel(
            name='ComparaisonDomaineVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.CharField(max_length=10)),
                ('niveau_significativite', models.CharField(max_length=5)),
                ('difference_requise', models.IntegerField()),
                ('domaine1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparaison_domaine1', to='tests_psy.domain')),
                ('domaine2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparaison_domaine2', to='tests_psy.domain')),
            ],
            options={
                'verbose_name': 'Comparaison de domaines',
                'verbose_name_plural': 'Comparaisons de domaines',
                'unique_together': {('age', 'niveau_significativite', 'domaine1', 'domaine2')},
            },
        ),
        migrations.CreateModel(
            name='FrequenceDifferenceDomaineVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.CharField(max_length=10)),
                ('frequence_16', models.CharField(max_length=10)),
                ('frequence_10', models.CharField(max_length=10)),
                ('frequence_5', models.CharField(max_length=10)),
                ('domaine1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freq_domaine1', to='tests_psy.domain')),
                ('domaine2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freq_domaine2', to='tests_psy.domain')),
            ],
            options={
                'verbose_name': 'Fréquence de différence (domaines)',
                'verbose_name_plural': 'Fréquences de différence (domaines)',
                'unique_together': {('age', 'domaine1', 'domaine2')},
            },
        ),
        migrations.CreateModel(
            name='IntervaleConfianceDomaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.CharField(choices=[('1', '1 an'), ('2', '2 ans'), ('3', '3 ans'), ('4', '4 ans'), ('5', '5 ans'), ('6', '6 ans'), ('7-8', '7-8 ans'), ('9-11', '9-11 ans'), ('12-14', '12-14 ans'), ('15-18', '15-18 ans'), ('19-29', '19-29 ans'), ('30-49', '30-49 ans'), ('50-90', '50-90 ans')], max_length=10)),
                ('niveau_confiance', models.IntegerField(choices=[(95, '95%'), (90, '90%'), (85, '85%')])),
                ('intervalle', models.IntegerField(help_text="Valeur de l'intervalle (ex: ±5 → entrer 5)")),
                ('note_composite', models.IntegerField(blank=True, help_text='Note composite pour ce niveau de confiance', null=True)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intervalles_confiance', to='tests_psy.domain')),
            ],
            options={
                'verbose_name': 'Intervalle de confiance domaine',
                'verbose_name_plural': 'Intervalles de confiance domaines',
                'ordering': ['age', '-niveau_confiance', 'domain'],
                'unique_together': {('age', 'niveau_confiance', 'domain')},
            },
        ),
        migrations.CreateModel(
            name='IntervaleConfianceSousDomaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.CharField(choices=[('1', '1 an'), ('2', '2 ans'), ('3', '3 ans'), ('4', '4 ans'), ('5', '5 ans'), ('6', '6 ans'), ('7-8', '7-8 ans'), ('9-11', '9-11 ans'), ('12-14', '12-14 ans'), ('15-18', '15-18 ans'), ('19-29', '19-29 ans'), ('30-49', '30-49 ans'), ('50-90', '50-90 ans')], max_length=10)),
                ('niveau_confiance', models.IntegerField(choices=[(95, '95%'), (90, '90%'), (85, '85%')])),
                ('intervalle', models.IntegerField(help_text="Valeur de l'intervalle (ex: ±2 → entrer 2)")),
                ('sous_domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intervalles_confiance', to='tests_psy.sousdomain')),
            ],
            options={
                'verbose_name': 'Intervalle de confiance sous-domaine',
                'verbose_name_plural': 'Intervalles de confiance sous-domaines',
                'ordering': ['age', '-niveau_confiance', 'sous_domaine'],
                'unique_together': {('age', 'niveau_confiance', 'sous_domaine')},
            },
        ),
        migrations.CreateModel(
            name='FrequenceDifferenceSousDomaineVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.CharField(max_length=10)),
                ('frequence_16', models.CharField(max_length=10)),
                ('frequence_10', models.CharField(max_length=10)),
                ('frequence_5', models.CharField(max_length=10)),
                ('sous_domaine1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freq_sous_domaine1', to='tests_psy.sousdomain')),
                ('sous_domaine2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='freq_sous_domaine2', to='tests_psy.sousdomain')),
            ],
            options={
                'verbose_name': 'Fréquence de différence (sous-domaines)',
                'verbose_name_plural': 'Fréquences de différence (sous-domaines)',
                'unique_together': {('age', 'sous_domaine1', 'sous_domaine2')},
            },
        ),
        migrations.CreateModel(
            name='ComparaisonSousDomaineVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.CharField(max_length=10)),
                ('niveau_significativite', models.CharField(max_length=5)),
                ('difference_requise', models.IntegerField()),
                ('sous_domaine1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparaison_sous_domaine1', to='tests_psy.sousdomain')),
                ('sous_domaine2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparaison_sous_domaine2', to='tests_psy.sousdomain')),
            ],
            options={
                'verbose_name': 'Comparaison de sous-domaines',
                'verbose_name_plural': 'Comparaisons de sous-domaines',
                'unique_together': {('age', 'niveau_significativite', 'sous_domaine1', 'sous_domaine2')},
            },
        ),
        migrations.CreateModel(
            name='AgeEquivalentSousDomaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_brute_min', models.IntegerField(verbose_name='Note brute minimum')),
                ('note_brute_max', models.IntegerField(blank=True, null=True, verbose_name='Note brute maximum')),
                ('age_special', models.CharField(blank=True, choices=[('>18', 'Plus de 18 ans'), ('<1', 'Moins de 1 an')], max_length=4, null=True, verbose_name='Âge spécial')),
                ('age_annees', models.IntegerField(blank=True, null=True, verbose_name='Années')),
                ('age_mois', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)], verbose_name='Mois')),
                ('sous_domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='age_equivalents', to='tests_psy.sousdomain', verbose_name='Sous-domaine')),
            ],
            options={
                'verbose_name': "Équivalence d'âge pour sous-domaine",
                'verbose_name_plural': "Équivalences d'âge pour sous-domaines",
                'ordering': ['sous_domaine', '-age_annees', '-age_mois'],
                'unique_together': {('sous_domaine', 'note_brute_min', 'note_brute_max')},
            },
        ),
        migrations.CreateModel(
            name='ReponseVineland',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reponse', models.CharField(blank=True, choices=[('0', '0'), ('1', '1'), ('2', '2'), ('NSP', 'Ne sais pas'), ('NA', 'Non applicable'), ('?', '?'), ('', 'Non répondu')], max_length=3, null=True, verbose_name='Réponse')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.organization', verbose_name='Organisation')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reponses', to='tests_psy.questionvineland')),
                ('test_vineland', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reponses_vineland', to='tests_psy.testvineland', verbose_name='Test Vineland')),
            ],
            options={
                'verbose_name': 'Réponse Vineland',
                'verbose_name_plural': 'Réponses Vineland',
                'unique_together': {('test_vineland', 'question')},
            },
        ),
    ]
